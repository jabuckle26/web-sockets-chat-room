{"version":3,"sources":["context/AppReducer.js","context/GlobalState.js","components/layout/Navbar.js","components/layout/ChatWindow.js","components/layout/ChatMembersPane.js","components/layout/Landing.js","components/layout/ChatRoom.js","App.js","index.js"],"names":["state","action","type","userName","payload","isChatOpen","chatMembers","initialState","socket","io","connect","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","addMember","openChatWindow","assignUserName","Navbar","className","setNotificationToObject","status","text","style","sender","ChatWindow","useContext","useState","messageText","setMessageText","chatOutput","setChatOutput","useEffect","on","data","map","message","key","onChange","e","target","handleTyping","placeholder","onClick","emit","ChatMembersPane","chatPanelList","setChatPanelList","member","name","Landing","isInvalidUserName","attemptedUserName","setAttemptedUserName","id","ChatRoom","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f25d617e.chunk.js","sourcesContent":["//import io from 'socket.io-client';\r\n\r\nexport default (state, action) => {\r\n    switch(action.type) {\r\n        case 'NEW_USERNAME':\r\n            state.userName = action.payload;\r\n            return {...state};\r\n        case 'OPEN_CHAT':\r\n            state.isChatOpen = action.payload;\r\n            return {...state};\r\n        case 'ADD_MEMBER':\r\n            state.chatMembers = [...state.chatMembers, action.payload];\r\n            return {...state};\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, {createContext, useReducer} from 'react';\r\nimport io from 'socket.io-client';\r\nimport AppReducer from './AppReducer';\r\n\r\nconst initialState = {\r\n    chatMembers: [],\r\n    isChatOpen: false,\r\n    socket: io.connect('http://localhost:4000'),\r\n    userName: '',\r\n}\r\n\r\nexport const GlobalContext = createContext(initialState);\r\n\r\nexport const GlobalProvider = ({children}) => {\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n    const addMember = (userName) => {\r\n        dispatch({\r\n            type: 'ADD_MEMBER',\r\n            payload: userName,\r\n        })\r\n    };\r\n\r\n    const assignUserName = (userName) => {\r\n        dispatch({\r\n            type: 'NEW_USERNAME',\r\n            payload: userName,\r\n        })\r\n    }\r\n\r\n    const openChatWindow = () => {\r\n        dispatch({\r\n            type: 'OPEN_CHAT',\r\n            payload: true,\r\n        })\r\n    }\r\n    \r\n    return (\r\n    <GlobalContext.Provider value={{\r\n        addMember,\r\n        chatMembers: state.chatMembers,\r\n        isChatOpen: state.isChatOpen,\r\n        openChatWindow,\r\n        socket: state.socket,\r\n        assignUserName,\r\n        userName: state.userName,\r\n    }}>\r\n        {children}\r\n    </GlobalContext.Provider>)\r\n}","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n    <nav>\r\n        <h1>\r\n            <i className=\"fas fa-code\"></i> Chat Room\r\n        </h1>\r\n    </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport { GlobalContext } from '../../context/GlobalState';\r\n\r\nconst setNotificationToObject = (userName, status) => {\r\n    return {\r\n        text: `${userName} has ${status} the chat!`,\r\n        style: 'notifyUserChange',\r\n        sender: '',\r\n    }\r\n}\r\n\r\nexport const ChatWindow = () => {\r\n    const { socket, userName } = useContext(GlobalContext);\r\n    const [messageText, setMessageText] = useState('');\r\n    const [chatOutput, setChatOutput] = useState([]);\r\n\r\n    const handleSend = () => {\r\n        socket.emit('sendMessage', { text: messageText, sender: userName, style: 'message' });\r\n        setMessageText('');\r\n    }\r\n\r\n    const handleTyping = (e) => {\r\n        setMessageText(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on(\"messageFromServer\", (data) => {\r\n            setChatOutput([...chatOutput, data]);\r\n        });\r\n\r\n        socket.on('newChatMember', (data) => {\r\n            setChatOutput([...chatOutput, setNotificationToObject(data, 'joined')]);\r\n        });\r\n\r\n        socket.on('chatMemberLeft', (data) => {\r\n\r\n            setChatOutput([...chatOutput, setNotificationToObject(data, 'left')]);\r\n        });\r\n    });\r\n\r\n    return (\r\n        <div className=\"chatWindow\">\r\n            <div className=\"chatContainer\">\r\n                <div className=\"chatTextOutput\">{chatOutput.map((message) => \r\n                    (\r\n                        message.style !== 'notifyUserChange' ?\r\n                            <p className={message.style} key={message.text}><span className=\"sender\">{`${message.sender}: `}</span>{message.text}</p>\r\n                            : <p className={message.style} key={message.text}>{message.text}</p>\r\n                ))}</div>\r\n                <div className=\"typingFeedback\"></div>\r\n            </div>\r\n            <div className=\"chatInputContainer\">\r\n                <textarea className=\"messageInput\" value={messageText} type=\"textArea\" onChange={(e) => handleTyping(e)} placeholder=\"Enter message...\" />\r\n                <button className=\"sendButton\" onClick={handleSend}>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport { GlobalContext } from '../../context/GlobalState';\r\n\r\nexport const ChatMembersPane = () => {\r\n    const {socket} = useContext(GlobalContext);\r\n    const [chatPanelList, setChatPanelList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        socket.on(\"updateChatMembers\", (data) => {\r\n            setChatPanelList(data);\r\n        });\r\n    });\r\n\r\n    return (\r\n        <div className=\"membersPane\">\r\n            <h3 className=\"membersPaneTitle\">Chat Members</h3>\r\n            <div className=\"membersContainer\">\r\n                {chatPanelList.map((member) => (\r\n                    <ul key={member.name} className=\"member\">{member.name}</ul>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useContext, useState} from 'react';\r\nimport { GlobalContext } from '../../context/GlobalState';\r\n\r\nexport const Landing = () => {\r\n    const {addMember, assignUserName, chatMembers, openChatWindow, socket} = useContext(GlobalContext);\r\n    const [isInvalidUserName, setIsInvalidUserName] = useState(false);\r\n    const [attemptedUserName, setAttemptedUserName] = useState('');\r\n\r\n    const handleEnterUserName = () => {\r\n        socket.emit('userLogin', attemptedUserName);\r\n        addMember({id: socket.id, name: attemptedUserName});\r\n        assignUserName(attemptedUserName);\r\n        openChatWindow();\r\n    }\r\n\r\n    const handleTyping = (e) => {\r\n        setAttemptedUserName(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <section className='landing'>\r\n            <div className='landingCard'>\r\n                <h2>Please enter a username:</h2>\r\n                <div>\r\n                    <input className='usernameRegistration' value={attemptedUserName} type='text' onChange={(e) => handleTyping(e)} placeholder='Enter a username...' />\r\n                    <button className='enterButton' onClick={() => handleEnterUserName()}>Enter</button>\r\n                </div>\r\n                {isInvalidUserName &&\r\n                    <p className='warningText'>Username already in use! Please try a different one.</p>\r\n                }\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Landing;","import React, {useContext} from 'react'\r\nimport { ChatWindow } from './ChatWindow'\r\nimport { ChatMembersPane } from './ChatMembersPane'\r\nimport { Landing } from './Landing';\r\nimport { GlobalContext } from '../../context/GlobalState';\r\n\r\n\r\nexport const ChatRoom = () => {\r\n    const {isChatOpen} = useContext(GlobalContext);\r\n    \r\n    return (\r\n        <section className=\"chatRoom\">\r\n            {!isChatOpen ?\r\n                <Landing></Landing> :\r\n                <>\r\n                    <ChatWindow></ChatWindow>\r\n                    <ChatMembersPane></ChatMembersPane>\r\n                </>\r\n            }\r\n        </section>\r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { GlobalProvider } from './context/GlobalState';\r\nimport Navbar from './components/layout/Navbar';\r\nimport './App.scss';\r\nimport { ChatRoom } from './components/layout/ChatRoom';\r\n\r\nconst App = () => {\r\n  return(\r\n      <>\r\n      <Navbar />\r\n        <GlobalProvider>\r\n          <ChatRoom></ChatRoom>\r\n        </GlobalProvider>\r\n    </>\r\n  )\r\n\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}